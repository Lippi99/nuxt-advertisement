generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  users     User[]
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  lastName       String
  password       String
  birth          DateTime
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  roleId         Int
  email          String          @unique
  establishments Establishment[]
  role           Role            @relation(fields: [roleId], references: [id])
}

model Playlist {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  advertisements Advertisement[]
  monitors       Monitor[]
}

model Establishment {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  monitors  Monitor[]
}

model Monitor {
  id               Int               @id @default(autoincrement())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  establishmentId  Int
  playlistId       Int?
  establishment    Establishment     @relation(fields: [establishmentId], references: [id])
  playlist         Playlist?         @relation(fields: [playlistId], references: [id])
  unpairedMonitors UnpairedMonitor[]
}

model Advertisement {
  id         Int                  @id @default(autoincrement())
  name       String
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @default(now())
  playlistId Int?
  playlist   Playlist?            @relation(fields: [playlistId], references: [id])
  images     AdvertisementImage[]
}

model AdvertisementImage {
  id              Int           @id @default(autoincrement())
  advertisementId Int
  url             String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
}

model UnpairedMonitor {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.Uuid
  paired    Boolean
  monitorId Int?
  monitor   Monitor? @relation(fields: [monitorId], references: [id])
}
